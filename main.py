"""
main.py: druhÃ½ projekt do Engeto Online Python Akademie

author: Rene Raszyk
email: 2004reno2004@gmail.com
"""

from random import sample
from time import time
import os
import re

def making_random_number ():
    """
    Generates a random 4-digit number with unique digits.
    The first digit is never zero.

    Returns:
        str: A 4-digit number as a string (e.g., "4837").
    """
    number = sample(range(10), 4)
    while number[0] == 0:
        number = sample(range(10), 4)

    return "".join(map(str, number))
    
def checking_player_number(number: str):
    """
    Validates the player's input to ensure it's a 4-digit number
    with no duplicate digits. Keeps prompting until a valid input is given.

    Args:
        number (str): The player's input.

    Returns:
        str: A valid 4-digit number as a string.
    """

    def duplicity_check(duplicid_number:list):
        j = 0
        while j != 3:
            if duplicid_number[j] in duplicid_number[j+1:]:
                return True
            j+=1
        return False
    
    while (not number.isnumeric()) or (len(number) != 4) or (int(number) < 1000) or (duplicity_check(number)):
        print("Wrong number. Try again")
        number = input(">>> ")
    return number

def checking_the_correctness_of_the_number(number: list, pc_number: list):
    """
    Compares the player's number with the computer's number.
    Counts how many digits are bulls (correct digit in correct position)
    and cows (correct digit in wrong position).

    Args:
        number (list): The player's guess.
        pc_number (list): The secret number generated by the computer.

    Returns:
        tuple: A pair of integers (bulls, cows).
    """
    cows = 0
    bull = 0

    for i in range(0,4):
        if number[i] == pc_number[i]:
            bull +=1
        elif number[i] in pc_number:
            cows += 1

    return bull, cows

def write_read_file(player_time: int, player_tries: int):
    """
    Reads and updates game statistics stored in a text file.
    If the file does not exist, it creates one with initial stats.

    Stats tracked:
    - Total number of games
    - Average time
    - Best (shortest) time
    - Average number of attempts
    - Least number of attempts

    Args:
        player_time (int): Duration of the game in seconds.
        player_tries (int): Number of attempts taken.

    Returns:
        list: [number_of_games, average_time, best_time, average_tries, least_attempt]
    """    
    stats_numbers = []
    if os.path.exists("stats.txt"):

        with open("stats.txt", "r+") as txt_file:
            content_txt = txt_file.read()
            text_split = re.split(r"[ \n]", content_txt)
            for i in range(len(text_split)):
                if text_split[i].isnumeric():
                    stats_numbers.append(text_split[i])

            number_of_games = int(stats_numbers[0])
            average_time = float(stats_numbers[1])
            best_time = int(stats_numbers[2])
            average_tries = float(stats_numbers[3])
            least_attempt = int(stats_numbers[4])

            number_of_games += 1
            average_time = round(((number_of_games - 1) * average_time + player_time) / number_of_games)
            if best_time > player_time:
                best_time = player_time
            average_tries = round(((number_of_games - 1) * average_tries + player_tries) / number_of_games)
            if least_attempt > player_tries:
                least_attempt = player_tries

            txt_file.seek(0)
            txt_file.write(f"Number of games: {number_of_games}\n")
            txt_file.write(f"Average time in seconds: {average_time}\n")
            txt_file.write(f"Best time in seconds: {best_time}\n")
            txt_file.write(f"Average number of attempts: {average_tries}\n")
            txt_file.write(f"Least attempts: {least_attempt}")
            txt_file.truncate()

            number = [number_of_games, average_time, best_time, average_tries, least_attempt]

    else: 
        
        number_of_games = 1
        average_time = player_time
        best_time = player_time
        average_tries = player_tries
        least_attempt = player_tries
        number = [1, player_time, player_time, player_tries, player_tries]

        with open("stats.txt", "w") as txt_file:
            txt_file.write(f"Number of games: {number_of_games}\n")
            txt_file.write(f"Average time in seconds: {average_time}\n")
            txt_file.write(f"Best time in seconds: {best_time}\n")
            txt_file.write(f"Average number of attempts: {average_tries}\n")
            txt_file.write(f"Least attempts: {least_attempt}")

    return number

if __name__ == "__main__":

    print("Hi there!\n" \
    "-----------------------------------------------\n" \
    "I've generated a random 4 digit number for you.\n" \
    "Let's play a bulls and cows game.\n" \
    "-----------------------------------------------\n" \
    "Enter a number:\n" \
    "-----------------------------------------------")

    number_of_tries = 1
    random_number = making_random_number()
    
    while True:
        player_number = checking_player_number(input(">>> "))
        if number_of_tries == 1:
            start_time = time()
        
        bulls, cows = checking_the_correctness_of_the_number(player_number, random_number)
        if bulls == 4:
            break
        print(f"{'bull' if bulls <= 1 else 'bulls'}: {bulls} | {'cow' if cows <= 1 else 'cows'}: {cows}")
        print("-----------------------------------------------")
        number_of_tries += 1

    print("Correct, you've guessed the right number")
    print("-----------------------------------------------")
    print("That's amazing!")
    print("-----------------------------------------------")

    end_time = time()
    player_time = round(end_time - start_time)
    print(f"Your time is: {player_time} {'seconds' if player_time > 1 else 'second'}")
    print("-----------------------------------------------")
    stats = write_read_file(player_time, number_of_tries)
    print("Here are your stats:")
    print(f"Number of games: {stats[0]}")
    print(f"Average time in seconds: {stats[1]}")
    print(f"Best time in seconds: {stats[2]}")
    print(f"Average number of attempts: {stats[3]}")
    print(f"Least attempts: {stats[4]}")
    